---
layout: post
title: "Microcontroller GPS with Circuit Python"
date: 2019-12-16 12:00:00 -0600
categories: tech
---
One of my personal goals for this year was to play around with some kind of microcontroller. I enjoy looking through [Adafruit](https://adafruit.com) to see some of the components they are building and some of the projects others share on there. While there, I found the [Circuit Playground Express](https://learn.adafruit.com/adafruit-circuit-playground-express)(CPE for short). It is a microcontroller with a slew of sensors built in. It looked like the perfect board to play around with. I didn't want to get too low level so I used [CircuitPython](https://github.com/adafruit/circuitpython), "a Python implementation for teaching coding with microcontrollers". I have tried to do similar projects on a Raspberry Pi, but struggled. With the playground express adafruit has an awesome tutorial with a ton of sample code. So I spent a while reading through the docs and then loaded some of the sample projects onto the device. Everything worked great! I then went to extend some of the samples to make them a little more complex. That all was pretty painless. So I went in search of an original project.

My inspiration came from my father-in-law. He is a catfishing guy, and was telling me about some features on the high-end trolling motors. Did you know that they can integrate with a gps-enabled fish-finder to do autopilot?! You can set a route and have the trolling motor follow the route! There is another feature that simulates being anchored. So you set a point and the trolling motor will keep you in the same spot by adjusting for wind, current, etc. I thought that was a really cool feature. I have always enjoyed GPS/GIS type work because it is so easy to see code interact with the real world. So I took the idea, stripped it down to just a microcontroller that will allow you to set a waypoint, then tell you where in relation to the waypoint you are. Next I needed to find some hardware to accomplish my goal.

## Hardware
* [GPS component](https://www.adafruit.com/product/746)
* [Compass](https://www.adafruit.com/product/1120)
* Circuit Playground Express

## The Code
All the controller flow code is [here](https://github.com/joedanks/raspberry-pi-stuff/blob/master/waypoint.py). Since all my components are from adafruit, they are awesome and release CircuitPython libraries to run them. Luckily I don't have to really understand UART vs I2C, but I have learned a little to understand the differences. The next hurdle was understanding the output from each of the components and converting them to values I understand. The gps outputs latitude and longitude; but as I learned, you should convert to WGS84 before comparing. Luckily, found a library, `utm`, in PyPi that will do that conversion with decent accuracy. The GPS component I'm using is accurate to around 3 meters. After getting the lat/long converted to WGS84 I have two points in space, current location and the waypoint location. Next comes some trigonometry. It has been a really long time since I've had to do this kind of math, but with a little Google-fu found enough info for the algorithm I need. After the computation code and the control code I felt like I was ready to try it.

## Integrating the Hardware & Software
This is where the real struggles occurred. The code was the part I was most familiar with. There were wiring diagrams online to get me started. I got everything wired up on a breadboard. I had tried some sample code to integrate with the GPS component and the Compass. That all worked as expected. I was excited to test out my code for real. The first time I tried to turn on the CPE it failed to start because it didn't have enough memory to get all the libraries loaded at once. Darn! So I hacked away at stuff to shrink down the total number of lines I was loading onto the CPE. I cracked apart the adafruit library to pull only the specific files I needed. After a few hours of stripping out everything I didn't need I finally got it to boot. The control code was working for the most part, but I made several tweaks to improve feedback when the microcontroller isn't hooked up to a computer that can read the REPL. I got everything working at my desk and was super excited. I took the contraption outside for the first field test. I stood in my yard with breadboard that had several wires connecting it to the CPE. I must have looked pretty strange. But I hit the button to set the waypoint and started walking away. Everything worked just how I wanted it to. I was shocked. The next day, I made a few more tweaks to "clean up" the code and provide even more feedback with the built-in LEDs on the board. Took it outside and nothing worked. Oops. So I reverted all my changes to get back to a working copy. Now I have some less clean code that works!

This project was a blast! I'm planning on setting a goal for next year to port the code over to a Raspberry Pi and solder everything together. That way it will look like a real piece of hardware and not some Frankenstein creation. Then hopefully integrate a servo to point in the correct direction, and maybe see if I can figure out to connect it to a real trolling motor.
